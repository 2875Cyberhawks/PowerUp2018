package autonomous;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FastFeatureDetector;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
* GripVII class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author Paige and Raffi
/*/

public class GripVII {

	//Outputs
	private Mat resizeImage0Output = new Mat();
	private Mat resizeImage1Output = new Mat();
	private Mat blur0Output = new Mat();
	private Mat rgbThresholdOutput = new Mat();
	private Mat blur1Output = new Mat();
	private MatOfKeyPoint findBlobsOutput = new MatOfKeyPoint();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}
	
	public GripVII() {
		;
	}
	
	public void process(Mat source0) {
		// Step Resize_Image0:
		Mat resizeImage0Input = source0;
		double resizeImage0Width = 256.0;
		double resizeImage0Height = 144.0;
		int resizeImage0Interpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImage0Input, resizeImage0Width, resizeImage0Height, resizeImage0Interpolation, resizeImage0Output);

		// Step Resize_Image1:
		Mat resizeImage1Input = resizeImage0Output;
		double resizeImage1Width = 640.0;
		double resizeImage1Height = 480.0;
		int resizeImage1Interpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImage1Input, resizeImage1Width, resizeImage1Height, resizeImage1Interpolation, resizeImage1Output);

		// Step Blur0:
		Mat blur0Input = resizeImage1Output;
		BlurType blur0Type = BlurType.get("Median Filter");
		double blur0Radius = 43.153153153153156;
		blur(blur0Input, blur0Type, blur0Radius, blur0Output);

		// Step RGB_Threshold0:
		Mat rgbThresholdInput = blur0Output;
		double[] rgbThresholdRed = {133.00359712230215, 255.0};
		double[] rgbThresholdGreen = {128.15330469440656, 255.0};
		double[] rgbThresholdBlue = {29.81115107913669, 114.06565656565658};
		rgbThreshold(rgbThresholdInput, rgbThresholdRed, rgbThresholdGreen, rgbThresholdBlue, rgbThresholdOutput);

		// Step Blur1:
		Mat blur1Input = rgbThresholdOutput;
		BlurType blur1Type = BlurType.get("Median Filter");
		double blur1Radius = 41.44144144144144;
		blur(blur1Input, blur1Type, blur1Radius, blur1Output);

		// Step Find_Blobs0:
		Mat findBlobsInput = blur1Output;
		double findBlobsMinArea = 1000.0;
		double[] findBlobsCircularity = {0.24280575539568344, 1.0};
		boolean findBlobsDarkBlobs = false;
		findBlobs(findBlobsInput, findBlobsMinArea, findBlobsCircularity, findBlobsDarkBlobs, findBlobsOutput);

	}

	public Mat resizeImage0Output() {
		return resizeImage0Output;
	}

	public Mat resizeImage1Output() {
		return resizeImage1Output;
	}

	public Mat blur0Output() {
		return blur0Output;
	}

	public Mat rgbThresholdOutput() {
		return rgbThresholdOutput;
	}

	public Mat blur1Output() {
		return blur1Output;
	}

	public MatOfKeyPoint findBlobsOutput() {
		return findBlobsOutput;
	}

	private void resizeImage(Mat input, double width, double height,
		int interpolation, Mat output) {
		Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
	}

	private void rgbThreshold(Mat input, double[] red, double[] green, double[] blue,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2RGB);
		Core.inRange(out, new Scalar(red[0], green[0], blue[0]),
			new Scalar(red[1], green[1], blue[1]), out);
	}

	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
			BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
			return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	private void blur(Mat input, BlurType type, double doubleRadius,
		Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}
	
	private void findBlobs(Mat input, double minArea, double[] circularity,
		Boolean darkBlobs, MatOfKeyPoint blobList) {
		FeatureDetector blobDet = FeatureDetector.create(FeatureDetector.SIMPLEBLOB); //FeatureDetector.SIMPLEBLOB deprecated
		try {
			File tempFile = File.createTempFile("config", ".xml");

			StringBuilder config = new StringBuilder();

			config.append("<?xml version=\"1.0\"?>\n");
			config.append("<opencv_storage>\n");
			config.append("<thresholdStep>10.</thresholdStep>\n");
			config.append("<minThreshold>50.</minThreshold>\n");
			config.append("<maxThreshold>220.</maxThreshold>\n");
			config.append("<minRepeatability>2</minRepeatability>\n");
			config.append("<minDistBetweenBlobs>10.</minDistBetweenBlobs>\n");
			config.append("<filterByColor>1</filterByColor>\n");
			config.append("<blobColor>");
			config.append((darkBlobs ? 0 : 255));
			config.append("</blobColor>\n");
			config.append("<filterByArea>1</filterByArea>\n");
			config.append("<minArea>");
			config.append(minArea);
			config.append("</minArea>\n");
			config.append("<maxArea>");
			config.append(Integer.MAX_VALUE);
			config.append("</maxArea>\n");
			config.append("<filterByCircularity>1</filterByCircularity>\n");
			config.append("<minCircularity>");
			config.append(circularity[0]);
			config.append("</minCircularity>\n");
			config.append("<maxCircularity>");
			config.append(circularity[1]);
			config.append("</maxCircularity>\n");
			config.append("<filterByInertia>1</filterByInertia>\n");
			config.append("<minInertiaRatio>0.1</minInertiaRatio>\n");
			config.append("<maxInertiaRatio>" + Integer.MAX_VALUE + "</maxInertiaRatio>\n");
			config.append("<filterByConvexity>1</filterByConvexity>\n");
			config.append("<minConvexity>0.95</minConvexity>\n");
			config.append("<maxConvexity>" + Integer.MAX_VALUE + "</maxConvexity>\n");
			config.append("</opencv_storage>\n");
			FileWriter writer;
			writer = new FileWriter(tempFile, false);
			writer.write(config.toString());
			writer.close();
			blobDet.read(tempFile.getPath());
		} catch (IOException e) {
			e.printStackTrace();
		}

		blobDet.detect(input, blobList);
	}
}